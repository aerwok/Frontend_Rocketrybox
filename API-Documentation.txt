# Rocketry Box - API Documentation

## Table of Contents
1. API Overview
2. Authentication
3. API Endpoints
4. Data Models
5. Error Handling
6. Rate Limiting
7. WebSocket Events
8. File Upload
9. Testing

## API Overview

### Base URL
Development: http://localhost:8000
Production: https://api.rocketrybox.com

### API Version
All endpoints are prefixed with `/api/v1/`

### Content Type
All requests and responses use `application/json`

### Authentication
All authenticated endpoints require a Bearer token in the Authorization header:
```
Authorization: Bearer <token>
```

## Authentication

### Login
Request Type: POST
Endpoint: /api/v1/auth/login
Headers: {
  "Content-Type": "application/json"
}
Request Body: {
  emailOrPhone: string,    // Email or 10-digit phone number
  password: string,        // Password
  otp: string,            // Optional, required for forgot password
  rememberMe: boolean     // Optional, defaults to false
}
Response: {
  token: string,
  user: {
    id: string,
    name: string,
    email: string,
    phone: string,
    role: "customer" | "seller" | "admin"
  }
}

### Register
Request Type: POST
Endpoint: /api/v1/auth/register
Headers: {
  "Content-Type": "application/json"
}
Request Body: {
  name: string,          // min 2 characters
  mobile: string,        // exactly 10 digits
  mobileOtp: string,     // exactly 6 digits
  email: string,         // valid email format
  emailOtp: string,      // exactly 6 digits
  password: string,      // see password rules below
  confirmPassword: string,// must match password
  address1: string,      // required
  address2: string,      // optional
  city: string,         // required
  state: string,        // required
  pincode: string,      // exactly 6 digits
  acceptTerms: boolean   // must be true
}
Response: {
  token: string,
  user: {
    id: string,
    name: string,
    email: string,
    phone: string,
    role: "customer" | "seller" | "admin"
  }
}

### Password Rules
{
  minLength: 8,
  requirements: [
    "At least one uppercase letter",
    "At least one lowercase letter",
    "At least one number",
    "At least one special character"
  ]
}

### OTP Endpoints
// Send Mobile OTP
Request Type: POST
Endpoint: /api/v1/auth/send-mobile-otp
Headers: {
  "Content-Type": "application/json"
}
Request Body: {
  mobile: string
}

// Send Email OTP
Request Type: POST
Endpoint: /api/v1/auth/send-email-otp
Headers: {
  "Content-Type": "application/json"
}
Request Body: {
  email: string
}

// Verify OTP
Request Type: POST
Endpoint: /api/v1/auth/verify-otp
Headers: {
  "Content-Type": "application/json"
}
Request Body: {
  phoneOrEmail: string,
  otp: string,      // 6 digits
  type: "mobile" | "email"
}

## API Endpoints

### Seller Endpoints

#### Profile Management
// Get Profile
Request Type: GET
Endpoint: /api/v1/seller/profile
Headers: {
  "Authorization": "Bearer ${token}"
}
Response: {
  id: string,
  name: string,
  email: string,
  phone: string,
  companyName: string,
  companyCategory: string,
  brandName?: string,
  website?: string,
  supportContact?: string,
  supportEmail?: string,
  operationsEmail?: string,
  financeEmail?: string,
  rechargeType?: string,
  profileImage?: string,
  storeLinks?: {
    website?: string,
    amazon?: string,
    shopify?: string,
    opencart?: string
  },
  address?: {
    street: string,
    city: string,
    state: string,
    country: string,
    postalCode: string,
    landmark?: string
  },
  documents?: {
    gstin?: string,
    pan?: string,
    cin?: string,
    tradeLicense?: string,
    msmeRegistration?: string,
    aadhaar?: string,
    documents: [
      {
        name: string,
        type: string,
        url: string,
        status: "verified" | "pending" | "rejected"
      }
    ]
  },
  bankDetails?: [
    {
      accountName: string,
      accountNumber: string,
      bankName: string,
      branch: string,
      ifscCode: string,
      swiftCode?: string,
      accountType: string,
      isDefault: boolean,
      cancelledCheque?: {
        url: string,
        status: "verified" | "pending"
      }
    }
  ]
}

// Update Profile
Request Type: PUT
Endpoint: /api/v1/seller/profile
Headers: {
  "Authorization": "Bearer ${token}",
  "Content-Type": "application/json"
}
Request Body: {
  name?: string,
  phone?: string,
  companyName?: string,
  companyCategory?: string,
  brandName?: string,
  website?: string,
  supportContact?: string,
  supportEmail?: string,
  operationsEmail?: string,
  financeEmail?: string,
  rechargeType?: string,
  address?: {
    street: string,
    city: string,
    state: string,
    country: string,
    postalCode: string,
    landmark?: string
  }
}
Response: {
  success: boolean,
  message: string,
  data?: ProfileData
}

// Update Profile Image
Request Type: POST
Endpoint: /api/v1/seller/profile/image
Headers: {
  "Authorization": "Bearer ${token}",
  "Content-Type": "multipart/form-data"
}
Request Body: {
  file: File
}
Response: {
  imageUrl: string
}

// Update Store Links
Request Type: PUT
Endpoint: /api/v1/seller/profile/store-links
Headers: {
  "Authorization": "Bearer ${token}",
  "Content-Type": "application/json"
}
Request Body: {
  website?: string,
  amazon?: string,
  shopify?: string,
  opencart?: string
}
Response: {
  success: boolean,
  message: string,
  data?: ProfileData
}

#### Orders Management
// Get Orders
Request Type: GET
Endpoint: /api/v1/seller/orders
Headers: {
  "Authorization": "Bearer ${token}"
}
Query Parameters:
  from?: string (ISO date)
  to?: string (ISO date)
  status?: "not-booked" | "processing" | "booked" | "cancelled" | "shipment-cancelled" | "error"
  search?: string
  page?: number
  limit?: number
Response: {
  data: [
    {
      orderId: string,
      date: string,
      customer: string,
      contact: string,
      items: [
        {
          name: string,
          sku: string,
          quantity: number,
          price: number
        }
      ],
      amount: string,
      payment: "COD" | "Prepaid",
      chanel: "MANUAL" | "EXCEL" | "SHOPIFY" | "WOOCOMMERCE" | "AMAZON" | "FLIPKART" | "OPENCART" | "API",
      weight: string,
      tags: string,
      action: "Ship" | "Processing" | "In Transit" | "Cancelled" | "Error" | "Pending",
      whatsapp: "Message Delivered" | "Message Read" | "Order Confirm" | "Order Cancelled",
      status: "not-booked" | "processing" | "booked" | "cancelled" | "shipment-cancelled" | "error",
      awbNumber?: string,
      pincode?: string
    }
  ],
  pagination: {
    total: number,
    page: number,
    limit: number,
    pages: number
  }
}

// Get Order Stats
Request Type: GET
Endpoint: /api/v1/seller/orders/stats
Headers: {
  "Authorization": "Bearer ${token}"
}
Query Parameters:
  from?: string (ISO date)
  to?: string (ISO date)
  status?: "not-booked" | "processing" | "booked" | "cancelled" | "shipment-cancelled" | "error"
Response: {
  data: {
    total: number,
    notBooked: number,
    processing: number,
    booked: number,
    cancelled: number,
    shipmentCancelled: number,
    error: number
  }
}

// Update Order Status
Request Type: PATCH
Endpoint: /api/v1/seller/orders/:orderId/status
Headers: {
  "Authorization": "Bearer ${token}",
  "Content-Type": "application/json"
}
Request Body: {
  status: "not-booked" | "processing" | "booked" | "cancelled" | "shipment-cancelled" | "error"
}

// Bulk Update Order Status
Request Type: PATCH
Endpoint: /api/v1/seller/orders/bulk-status
Headers: {
  "Authorization": "Bearer ${token}",
  "Content-Type": "application/json"
}
Request Body: {
  orderIds: string[],
  status: "not-booked" | "processing" | "booked" | "cancelled" | "shipment-cancelled" | "error"
}

// Process Shipping
Request Type: POST
Endpoint: /api/v1/seller/orders/ship
Headers: {
  "Authorization": "Bearer ${token}",
  "Content-Type": "application/json"
}
Request Body: {
  orderIds: string[],
  shippingOptions: {
    warehouse: string,
    rtoWarehouse: string,
    shippingMode: "surface" | "air",
    courier: string
  }
}

// Get Shipping Options
Request Type: GET
Endpoint: /api/v1/seller/shipping-options
Headers: {
  "Authorization": "Bearer ${token}"
}
Response: {
  data: {
    warehouses: [
      {
        id: string,
        name: string,
        address: string
      }
    ],
    rtoWarehouses: [
      {
        id: string,
        name: string,
        address: string
      }
    ],
    shippingModes: [
      {
        id: string,
        name: string,
        description: string
      }
    ],
    couriers: [
      {
        id: string,
        name: string,
        description: string
      }
    ]
  }
}

#### Dashboard
// Get Dashboard Stats
Request Type: GET
Endpoint: /api/v1/seller/dashboard/stats
Headers: {
  "Authorization": "Bearer ${token}"
}
Response: {
  data: {
    orders: {
      total: number,
      pending: number,
      processing: number,
      shipped: number,
      delivered: number,
      cancelled: number,
      todayCount: number
    },
    shipments: {
      total: number,
      todayCount: number
    },
    delivery: {
      total: number,
      todayCount: number
    },
    cod: {
      expected: number,
      totalDue: number
    },
    revenue: {
      total: number,
      dailyGrowth: number
    },
    ndr: {
      pending: number,
      actionRequired: number
    }
  }
}

// Get Dashboard Chart Data
Request Type: GET
Endpoint: /api/v1/seller/dashboard/chart-data
Headers: {
  "Authorization": "Bearer ${token}"
}
Query Parameters:
  from?: string (ISO date)
  to?: string (ISO date)
  timeFilter?: "1D" | "1W" | "1M" | "3M" | "1Y" | "ALL"
Response: {
  data: {
    orderStatusDistribution: {
      delivered: number,
      inTransit: number,
      pending: number
    },
    shipmentTrends: [
      {
        day: string,
        current: number,
        previous: number
      }
    ],
    revenueTrends: [
      {
        month: string,
        value: number
      }
    ],
    topProducts: [
      {
        month: string,
        desktop: number
      }
    ],
    deliveryPerformance: [
      {
        month: string,
        desktop: number
      }
    ],
    courierData: [
      {
        courier: string,
        total: number,
        notShipped: number,
        pendingPickup: number,
        inTransit: number,
        ofd: number,
        delivered: { count: number, percentage: string },
        cancelled: { count: number, percentage: string },
        exception: { count: number, percentage: string },
        rto: number,
        lostDamage: number
      }
    ],
    productData: [
      {
        productName: string,
        quantity: number,
        totalShipments: number,
        notShipped: number,
        cancelled: number,
        pendingPickup: number,
        inTransit: number,
        delivered: number,
        rto: number
      }
    ]
  }
}

// Get Courier Performance
Request Type: GET
Endpoint: /api/v1/seller/dashboard/courier-performance
Headers: {
  "Authorization": "Bearer ${token}"
}
Response: {
  data: [
    {
      courier: string,
      total: number,
      notShipped: number,
      pendingPickup: number,
      inTransit: number,
      ofd: number,
      delivered: { count: number, percentage: string },
      cancelled: { count: number, percentage: string },
      exception: { count: number, percentage: string },
      rto: number,
      lostDamage: number
    }
  ]
}

// Get Top Products
Request Type: GET
Endpoint: /api/v1/seller/dashboard/top-products
Headers: {
  "Authorization": "Bearer ${token}"
}
Response: {
  data: [
    {
      productName: string,
      quantity: number,
      totalShipments: number,
      notShipped: number,
      cancelled: number,
      pendingPickup: number,
      inTransit: number,
      delivered: number,
      rto: number
    }
  ]
}

// Download Dashboard Report
Request Type: GET
Endpoint: /api/v1/seller/dashboard/report
Headers: {
  "Authorization": "Bearer ${token}"
}
Query Parameters:
  format: "csv" | "pdf"
Response: Blob (file download)

#### Wallet
// Get Wallet Balance
Request Type: GET
Endpoint: /api/v1/seller/wallet/balance
Headers: {
  "Authorization": "Bearer ${token}"
}
Response: {
  data: {
    walletBalance: number,
    lastRecharge: number,
    remittanceBalance: number,
    lastUpdated: string
  }
}

// Get Wallet History
Request Type: GET
Endpoint: /api/v1/seller/wallet/history
Headers: {
  "Authorization": "Bearer ${token}"
}
Query Parameters:
  page?: number
  limit?: number
Response: {
  data: {
    transactions: [
      {
        transactionId: string,
        date: string,
        type: "Credit" | "Debit",
        amount: number,
        balance: number,
        description: string,
        status: "Success" | "Pending" | "Failed",
        paymentMethod?: string,
        metadata?: Record<string, unknown>
      }
    ],
    totalCount: number,
    currentPage: number,
    totalPages: number,
    hasMore: boolean
  }
}

// Recharge Wallet
Request Type: POST
Endpoint: /api/v1/seller/wallet/recharge
Headers: {
  "Authorization": "Bearer ${token}",
  "Content-Type": "application/json"
}
Request Body: {
  amount: number,
  paymentMethod: string
}
Response: {
  data: {
    walletBalance: number,
    lastRecharge: number,
    remittanceBalance: number,
    lastUpdated: string
  }
}

// Verify Transaction
Request Type: POST
Endpoint: /api/v1/seller/wallet/verify-transaction
Headers: {
  "Authorization": "Bearer ${token}",
  "Content-Type": "application/json"
}
Request Body: {
  transactionId: string
}
Response: {
  data: {
    verified: boolean
  }
}

#### Bulk Orders
// Upload Bulk Order
Request Type: POST
Endpoint: /api/v1/seller/bulk-orders/upload
Headers: {
  "Authorization": "Bearer ${token}",
  "Content-Type": "multipart/form-data"
}
Request Body: {
  file: File
}
Response: {
  data: {
    orderId: string,
    status: "Processing" | "Completed" | "Failed",
    totalRows: number,
    processedRows: number,
    failedRows: number,
    errors?: [
      {
        row: number,
        message: string
      }
    ],
    createdAt: string,
    updatedAt: string
  }
}

// Get Bulk Order Status
Request Type: GET
Endpoint: /api/v1/seller/bulk-orders/:orderId/status
Headers: {
  "Authorization": "Bearer ${token}"
}
Response: {
  data: {
    orderId: string,
    status: "Processing" | "Completed" | "Failed",
    progress: number,
    totalRows: number,
    processedRows: number,
    failedRows: number,
    errors?: [
      {
        row: number,
        message: string
      }
    ],
    createdAt: string,
    updatedAt: string
  }
}

// Cancel Bulk Order
Request Type: POST
Endpoint: /api/v1/seller/bulk-orders/:orderId/cancel
Headers: {
  "Authorization": "Bearer ${token}"
}
Response: {
  data: {
    success: boolean
  }
}

// Download Bulk Order Template
Request Type: GET
Endpoint: /api/v1/seller/bulk-orders/template
Headers: {
  "Authorization": "Bearer ${token}"
}
Response: Blob (file download)

#### Shipments Management

// Get Shipments
Request Type: GET
Endpoint: /api/v1/seller/shipments
Headers: {
  "Authorization": "Bearer ${token}"
}
Query Parameters:
  status?: "all" | "booked" | "pending-pickup" | "in-transit" | "delivered" | "cancelled" | "exception"
  awb?: string
  from?: string (ISO date)
  to?: string (ISO date)
  page?: number
  limit?: number
Response: {
  data: [
    {
      orderId: string,
      orderDate: string,
      booked: string,
      pickupId: string,
      customer: string,
      product: string,
      amount: string,
      payment: "COD" | "Prepaid",
      weight: string,
      channel: string,
      awb: string,
      courier: string,
      tracking: string,
      status: string
    }
  ],
  pagination: {
    total: number,
    page: number,
    limit: number,
    pages: number
  }
}

// Get Shipment Details
Request Type: GET
Endpoint: /api/v1/seller/shipments/:shipmentId
Headers: {
  "Authorization": "Bearer ${token}"
}
Response: {
  data: {
    shipmentId: string,
    orderId: string,
    orderDate: string,
    booked: string,
    pickupId: string,
    customer: {
      name: string,
      phone: string,
      email: string,
      address: {
        street: string,
        city: string,
        state: string,
        pincode: string,
        country: string
      }
    },
    product: {
      name: string,
      sku: string,
      quantity: number,
      price: number,
      weight: string,
      dimensions: {
        length: number,
        width: number,
        height: number
      }
    },
    payment: {
      method: "COD" | "Prepaid",
      amount: string,
      codCharge: string,
      shippingCharge: string,
      gst: string,
      total: string
    },
    channel: string,
    awb: string,
    courier: {
      name: string,
      trackingUrl: string
    },
    status: string,
    trackingHistory: [
      {
        status: string,
        location: string,
        timestamp: string,
        description: string
      }
    ]
  }
}

// Track Shipment
Request Type: GET
Endpoint: /api/v1/seller/shipments/:awb/track
Headers: {
  "Authorization": "Bearer ${token}"
}
Response: {
  data: {
    awb: string,
    courier: string,
    status: string,
    expectedDelivery: string,
    origin: string,
    destination: string,
    weight: string,
    trackingHistory: [
      {
        status: string,
        location: string,
        timestamp: string,
        description: string
      }
    ]
  }
}

// Cancel Shipment
Request Type: POST
Endpoint: /api/v1/seller/shipments/:awb/cancel
Headers: {
  "Authorization": "Bearer ${token}",
  "Content-Type": "application/json"
}
Request Body: {
  reason: string
}
Response: {
  data: {
    success: boolean,
    message: string,
    cancellationId: string
  }
}

// Bulk Track Shipments
Request Type: POST
Endpoint: /api/v1/seller/shipments/bulk-track
Headers: {
  "Authorization": "Bearer ${token}",
  "Content-Type": "application/json"
}
Request Body: {
  awbs: string[]
}
Response: {
  data: [
    {
      awb: string,
      courier: string,
      status: string,
      lastUpdated: string
    }
  ]
}

// Get Shipping Rates
Request Type: GET
Endpoint: /api/v1/seller/shipments/rates
Headers: {
  "Authorization": "Bearer ${token}"
}
Query Parameters:
  fromPincode: string
  toPincode: string
  weight: string
  payment: "cod" | "prepaid"
Response: {
  data: [
    {
      courier: string,
      mode: string,
      zone: string,
      baseCharge: number,
      codCharge: number,
      gst: number,
      total: number,
      expectedDelivery: string
    }
  ]
}

// Print Label
Request Type: GET
Endpoint: /api/v1/seller/shipments/:awb/label
Headers: {
  "Authorization": "Bearer ${token}"
}
Query Parameters:
  format?: "pdf" | "thermal"
  size?: "A4" | "4x6"
Response: Blob (file download)

// Print Manifest
Request Type: POST
Endpoint: /api/v1/seller/shipments/manifest
Headers: {
  "Authorization": "Bearer ${token}",
  "Content-Type": "application/json"
}
Request Body: {
  awbs: string[],
  courier?: string
}
Response: Blob (file download)

### Customer Endpoints

#### Profile Management
// Get Profile
Request Type: GET
Endpoint: /api/v1/customer/profile
Headers: {
  "Authorization": "Bearer ${token}"
}
Response: {
  id: string,
  name: string,
  email: string,
  phone: string,
  address: {
    street: string,
    city: string,
    state: string,
    pincode: string,
    country: string
  }
}

// Update Profile
Request Type: PUT
Endpoint: /api/v1/customer/profile
Headers: {
  "Authorization": "Bearer ${token}",
  "Content-Type": "application/json"
}
Request Body: {
  name: string,
  phone: string,
  address: {
    street: string,
    city: string,
    state: string,
    pincode: string,
    country: string
  },
  email: string,
  password: {
    current: string,
    new: string
  }
}

#### Orders
// Create Order
Request Type: POST
Endpoint: /api/v1/customer/orders
Headers: {
  "Authorization": "Bearer ${token}",
  "Content-Type": "application/json"
}
Request Body: {
  pickupAddress: {
    street: string,
    city: string,
    state: string,
    pincode: string,
    country: string,
    contactName: string,
    contactPhone: string
  },
  deliveryAddress: {
    street: string,
    city: string,
    state: string,
    pincode: string,
    country: string,
    contactName: string,
    contactPhone: string
  },
  package: {
    weight: number,
    dimensions: {
      length: number,
      width: number,
      height: number
    },
    declaredValue: number,
    description: string
  },
  payment: {
    mode: "COD" | "Prepaid",
    amount: number
  }
}

// Get Orders
Request Type: GET
Endpoint: /api/v1/customer/orders
Headers: {
  "Authorization": "Bearer ${token}"
}
Query Parameters:
  status?: "pending" | "processing" | "delivered" | "cancelled"
  page?: number
  limit?: number
Response: {
  orders: [
    {
      id: string,
      trackingNumber: string,
      status: "pending" | "processing" | "delivered" | "cancelled",
      createdAt: string,
      updatedAt: string,
      pickupAddress: {
        street: string,
        city: string,
        state: string,
        pincode: string,
        country: string,
        contactName: string,
        contactPhone: string
      },
      deliveryAddress: {
        street: string,
        city: string,
        state: string,
        pincode: string,
        country: string,
        contactName: string,
        contactPhone: string
      },
      package: {
        weight: number,
        dimensions: {
          length: number,
          width: number,
          height: number
        },
        declaredValue: number,
        description: string
      },
      payment: {
        mode: "COD" | "Prepaid",
        amount: number,
        status: "pending" | "paid" | "failed"
      }
    }
  ],
  pagination: {
    total: number,
    page: number,
    limit: number,
    pages: number
  }
}

// Get Order Details
Request Type: GET
Endpoint: /api/v1/customer/orders/:orderId
Headers: {
  "Authorization": "Bearer ${token}"
}
Response: {
  id: string,
  trackingNumber: string,
  status: "pending" | "processing" | "delivered" | "cancelled",
  createdAt: string,
  updatedAt: string,
  pickupAddress: {
    street: string,
    city: string,
    state: string,
    pincode: string,
    country: string,
    contactName: string,
    contactPhone: string
  },
  deliveryAddress: {
    street: string,
    city: string,
    state: string,
    pincode: string,
    country: string,
    contactName: string,
    contactPhone: string
  },
  package: {
    weight: number,
    dimensions: {
      length: number,
      width: number,
      height: number
    },
    declaredValue: number,
    description: string
  },
  payment: {
    mode: "COD" | "Prepaid",
    amount: number,
    status: "pending" | "paid" | "failed"
  },
  tracking: [
    {
      status: string,
      location: string,
      timestamp: string,
      description: string
    }
  ]
}

// Cancel Order
Request Type: POST
Endpoint: /api/v1/customer/orders/:orderId/cancel
Headers: {
  "Authorization": "Bearer ${token}",
  "Content-Type": "application/json"
}
Request Body: {
  reason: string
}

### Admin Endpoints

#### User Management
// Get Users
Request Type: GET
Endpoint: /api/v1/admin/users
Headers: {
  "Authorization": "Bearer ${token}"
}
Query Parameters:
  role?: "customer" | "seller" | "admin"
  search?: string
  page?: number
  limit?: number
Response: {
  data: [
    {
      id: string,
      name: string,
      email: string,
      phone: string,
      role: "customer" | "seller" | "admin",
      status: "active" | "inactive" | "suspended",
      createdAt: string
    }
  ],
  pagination: {
    total: number,
    page: number,
    limit: number,
    pages: number
  }
}

// Update User Status
Request Type: PATCH
Endpoint: /api/v1/admin/users/:userId/status
Headers: {
  "Authorization": "Bearer ${token}",
  "Content-Type": "application/json"
}
Request Body: {
  status: "active" | "inactive" | "suspended"
}

#### Order Management
// Get All Orders
Request Type: GET
Endpoint: /api/v1/admin/orders
Headers: {
  "Authorization": "Bearer ${token}"
}
Query Parameters:
  from?: string (ISO date)
  to?: string (ISO date)
  status?: string
  sellerId?: string
  customerId?: string
  page?: number
  limit?: number
Response: {
  data: [
    {
      id: string,
      orderId: string,
      sellerId: string,
      customerId: string,
      status: string,
      createdAt: string,
      updatedAt: string,
      details: object
    }
  ],
  pagination: {
    total: number,
    page: number,
    limit: number,
    pages: number
  }
}

// Update Order
Request Type: PATCH
Endpoint: /api/v1/admin/orders/:orderId
Headers: {
  "Authorization": "Bearer ${token}",
  "Content-Type": "application/json"
}
Request Body: {
  status: string,
  notes: string
}

## Data Models

### OrderData
```typescript
interface OrderItem {
  name: string;
  sku: string;
  quantity: number;
  price: number;
}

interface OrderData {
  orderId: string;
  date: string;
  customer: string;
  contact: string;
  items: OrderItem[];
  amount: string;
  payment: "COD" | "Prepaid";
  chanel: "MANUAL" | "EXCEL" | "SHOPIFY" | "WOOCOMMERCE" | "AMAZON" | "FLIPKART" | "OPENCART" | "API";
  weight: string;
  tags: string;
  action: "Ship" | "Processing" | "In Transit" | "Cancelled" | "Error" | "Pending";
  whatsapp: "Message Delivered" | "Message Read" | "Order Confirm" | "Order Cancelled";
  status: "not-booked" | "processing" | "booked" | "cancelled" | "shipment-cancelled" | "error";
  awbNumber?: string;
  pincode?: string;
}
```

### OrderFilters
```typescript
interface OrderFilters {
  dateRange?: {
    from: Date;
    to: Date;
  };
  status?: OrderData['status'];
  search?: string;
}
```

### OrderStats
```typescript
interface OrderStats {
  total: number;
  notBooked: number;
  processing: number;
  booked: number;
  cancelled: number;
  shipmentCancelled: number;
  error: number;
}
```

### ShippingOptions
```typescript
interface ShippingOptions {
  warehouse: string;
  rtoWarehouse: string;
  shippingMode: string;
  courier: string;
}
```

### ProfileData
```typescript
interface ProfileData {
  id: string;
  name: string;
  email: string;
  phone: string;
  companyName: string;
  companyCategory: string;
  brandName?: string;
  website?: string;
  supportContact?: string;
  supportEmail?: string;
  operationsEmail?: string;
  financeEmail?: string;
  rechargeType?: string;
  profileImage?: string;
  storeLinks?: {
    website?: string;
    amazon?: string;
    shopify?: string;
    opencart?: string;
  };
  address?: {
    street: string;
    city: string;
    state: string;
    country: string;
    postalCode: string;
    landmark?: string;
  };
  documents?: {
    gstin?: string;
    pan?: string;
    cin?: string;
    tradeLicense?: string;
    msmeRegistration?: string;
    aadhaar?: string;
    documents: {
      name: string;
      type: string;
      url: string;
      status: 'verified' | 'pending' | 'rejected';
    }[];
  };
  bankDetails?: {
    accountName: string;
    accountNumber: string;
    bankName: string;
    branch: string;
    ifscCode: string;
    swiftCode?: string;
    accountType: string;
    isDefault: boolean;
    cancelledCheque?: {
      url: string;
      status: 'verified' | 'pending';
    };
  }[];
}
```

### WalletBalance
```typescript
interface WalletBalance {
  walletBalance: number;
  lastRecharge: number;
  remittanceBalance: number;
  lastUpdated: string;
}
```

### WalletTransaction
```typescript
interface WalletTransaction {
  transactionId: string;
  date: string;
  type: "Credit" | "Debit";
  amount: number;
  balance: number;
  description: string;
  status: "Success" | "Pending" | "Failed";
  paymentMethod?: string;
  metadata?: Record<string, unknown>;
}
```

### DashboardStats
```typescript
interface DashboardStats {
  orders: {
    total: number;
    pending: number;
    processing: number;
    shipped: number;
    delivered: number;
    cancelled: number;
    todayCount: number;
  };
  shipments: {
    total: number;
    todayCount: number;
  };
  delivery: {
    total: number;
    todayCount: number;
  };
  cod: {
    expected: number;
    totalDue: number;
  };
  revenue: {
    total: number;
    dailyGrowth: number;
  };
  ndr: {
    pending: number;
    actionRequired: number;
  };
}
```

### Shipment
```typescript
interface Shipment {
  orderId: string;
  orderDate: string;
  booked: string;
  pickupId: string;
  customer: string;
  product: string;
  amount: string;
  payment: "COD" | "Prepaid";
  weight: string;
  channel: string;
  awb: string;
  courier: string;
  tracking: string;
  status: string;
}
```

### ShipmentDetail
```typescript
interface ShipmentDetail {
  shipmentId: string;
  orderId: string;
  orderDate: string;
  booked: string;
  pickupId: string;
  customer: {
    name: string;
    phone: string;
    email: string;
    address: {
      street: string;
      city: string;
      state: string;
      pincode: string;
      country: string;
    };
  };
  product: {
    name: string;
    sku: string;
    quantity: number;
    price: number;
    weight: string;
    dimensions: {
      length: number;
      width: number;
      height: number;
    };
  };
  payment: {
    method: "COD" | "Prepaid";
    amount: string;
    codCharge: string;
    shippingCharge: string;
    gst: string;
    total: string;
  };
  channel: string;
  awb: string;
  courier: {
    name: string;
    trackingUrl: string;
  };
  status: string;
  trackingHistory: TrackingEvent[];
}
```

### TrackingEvent
```typescript
interface TrackingEvent {
  status: string;
  location: string;
  timestamp: string;
  description: string;
}
```

### ShippingRate
```typescript
interface ShippingRate {
  courier: string;
  mode: string;
  zone: string;
  baseCharge: number;
  codCharge: number;
  gst: number;
  total: number;
  expectedDelivery: string;
}
```

## Error Handling

All API responses follow a standard format:

```typescript
// Success Response
{
  "data": T,
  "message": string,
  "status": number
}

// Error Response
{
  "message": string,
  "code": string,
  "status": number,
  "details": unknown
}
```

Common error codes:
- `UNAUTHORIZED`: Authentication required or token expired
- `FORBIDDEN`: User doesn't have permission
- `NOT_FOUND`: Resource not found
- `VALIDATION_ERROR`: Request validation failed
- `SERVER_ERROR`: Internal server error

## Rate Limiting

API requests are limited to:
- 100 requests per minute for authenticated users
- 20 requests per minute for unauthenticated users

Rate limit headers are included in responses:
```
X-RateLimit-Limit: 100
X-RateLimit-Remaining: 95
X-RateLimit-Reset: 1620000000
```

## WebSocket Events

WebSocket connection: `ws://api.rocketrybox.com/ws`

### Events

#### Order Status Update
```json
{
  "event": "order_status_update",
  "data": {
    "orderId": "string",
    "status": "string",
    "timestamp": "string"
  }
}
```

#### New Order
```json
{
  "event": "new_order",
  "data": {
    "orderId": "string",
    "customer": "string",
    "amount": "string",
    "timestamp": "string"
  }
}
```

## File Upload

### Upload File
Request Type: POST
Endpoint: /api/v1/upload
Headers: {
  "Authorization": "Bearer ${token}",
  "Content-Type": "multipart/form-data"
}
Form Data:
  file: File
Response: {
  data: {
    url: string,
    filename: string,
    mimeType: string,
    size: number
  }
}

## Testing

### Test Environment
Base URL: https://test-api.rocketrybox.com

### Test Credentials
Customer: customer@test.com / Test123!
Seller: seller@test.com / Test123!
Admin: admin@test.com / Test123! 